<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dandelion.dao.generator.NoticeMapper">
  <resultMap id="BaseResultMap" type="com.dandelion.bean.Notice">
    <id column="notice_id" jdbcType="INTEGER" property="noticeId" />
    <result column="notice_title" jdbcType="VARCHAR" property="noticeTitle" />
    <result column="notice_level" jdbcType="VARCHAR" property="noticeLevel" />
    <result column="roof_placement" jdbcType="TINYINT" property="roofPlacement" />
    <result column="create_id" jdbcType="INTEGER" property="createId" />
    <result column="create_name" jdbcType="VARCHAR" property="createName" />
    <result column="create_time" jdbcType="VARCHAR" property="createTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.dandelion.bean.Notice">
    <result column="notice_content" jdbcType="LONGVARCHAR" property="noticeContent" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    notice_id, notice_title, notice_level, roof_placement, create_id, create_name, create_time
  </sql>
  <sql id="Blob_Column_List">
    notice_content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.dandelion.bean.example.NoticeExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.dandelion.bean.example.NoticeExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from notice
    where notice_id = #{noticeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from notice
    where notice_id = #{noticeId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.dandelion.bean.example.NoticeExample">
    delete from notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.dandelion.bean.Notice">
    insert into notice (notice_id, notice_title, notice_level, 
      roof_placement, create_id, create_name, 
      create_time, notice_content)
    values (#{noticeId,jdbcType=INTEGER}, #{noticeTitle,jdbcType=VARCHAR}, #{noticeLevel,jdbcType=VARCHAR}, 
      #{roofPlacement,jdbcType=TINYINT}, #{createId,jdbcType=INTEGER}, #{createName,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=VARCHAR}, #{noticeContent,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.dandelion.bean.Notice">
    insert into notice
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="noticeId != null">
        notice_id,
      </if>
      <if test="noticeTitle != null">
        notice_title,
      </if>
      <if test="noticeLevel != null">
        notice_level,
      </if>
      <if test="roofPlacement != null">
        roof_placement,
      </if>
      <if test="createId != null">
        create_id,
      </if>
      <if test="createName != null">
        create_name,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="noticeContent != null">
        notice_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="noticeId != null">
        #{noticeId,jdbcType=INTEGER},
      </if>
      <if test="noticeTitle != null">
        #{noticeTitle,jdbcType=VARCHAR},
      </if>
      <if test="noticeLevel != null">
        #{noticeLevel,jdbcType=VARCHAR},
      </if>
      <if test="roofPlacement != null">
        #{roofPlacement,jdbcType=TINYINT},
      </if>
      <if test="createId != null">
        #{createId,jdbcType=INTEGER},
      </if>
      <if test="createName != null">
        #{createName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="noticeContent != null">
        #{noticeContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.dandelion.bean.example.NoticeExample" resultType="java.lang.Long">
    select count(*) from notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update notice
    <set>
      <if test="record.noticeId != null">
        notice_id = #{record.noticeId,jdbcType=INTEGER},
      </if>
      <if test="record.noticeTitle != null">
        notice_title = #{record.noticeTitle,jdbcType=VARCHAR},
      </if>
      <if test="record.noticeLevel != null">
        notice_level = #{record.noticeLevel,jdbcType=VARCHAR},
      </if>
      <if test="record.roofPlacement != null">
        roof_placement = #{record.roofPlacement,jdbcType=TINYINT},
      </if>
      <if test="record.createId != null">
        create_id = #{record.createId,jdbcType=INTEGER},
      </if>
      <if test="record.createName != null">
        create_name = #{record.createName,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=VARCHAR},
      </if>
      <if test="record.noticeContent != null">
        notice_content = #{record.noticeContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update notice
    set notice_id = #{record.noticeId,jdbcType=INTEGER},
      notice_title = #{record.noticeTitle,jdbcType=VARCHAR},
      notice_level = #{record.noticeLevel,jdbcType=VARCHAR},
      roof_placement = #{record.roofPlacement,jdbcType=TINYINT},
      create_id = #{record.createId,jdbcType=INTEGER},
      create_name = #{record.createName,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=VARCHAR},
      notice_content = #{record.noticeContent,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update notice
    set notice_id = #{record.noticeId,jdbcType=INTEGER},
      notice_title = #{record.noticeTitle,jdbcType=VARCHAR},
      notice_level = #{record.noticeLevel,jdbcType=VARCHAR},
      roof_placement = #{record.roofPlacement,jdbcType=TINYINT},
      create_id = #{record.createId,jdbcType=INTEGER},
      create_name = #{record.createName,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.dandelion.bean.Notice">
    update notice
    <set>
      <if test="noticeTitle != null">
        notice_title = #{noticeTitle,jdbcType=VARCHAR},
      </if>
      <if test="noticeLevel != null">
        notice_level = #{noticeLevel,jdbcType=VARCHAR},
      </if>
      <if test="roofPlacement != null">
        roof_placement = #{roofPlacement,jdbcType=TINYINT},
      </if>
      <if test="createId != null">
        create_id = #{createId,jdbcType=INTEGER},
      </if>
      <if test="createName != null">
        create_name = #{createName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=VARCHAR},
      </if>
      <if test="noticeContent != null">
        notice_content = #{noticeContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where notice_id = #{noticeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.dandelion.bean.Notice">
    update notice
    set notice_title = #{noticeTitle,jdbcType=VARCHAR},
      notice_level = #{noticeLevel,jdbcType=VARCHAR},
      roof_placement = #{roofPlacement,jdbcType=TINYINT},
      create_id = #{createId,jdbcType=INTEGER},
      create_name = #{createName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=VARCHAR},
      notice_content = #{noticeContent,jdbcType=LONGVARCHAR}
    where notice_id = #{noticeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.dandelion.bean.Notice">
    update notice
    set notice_title = #{noticeTitle,jdbcType=VARCHAR},
      notice_level = #{noticeLevel,jdbcType=VARCHAR},
      roof_placement = #{roofPlacement,jdbcType=TINYINT},
      create_id = #{createId,jdbcType=INTEGER},
      create_name = #{createName,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=VARCHAR}
    where notice_id = #{noticeId,jdbcType=INTEGER}
  </update>
  <select id="selectOneByExample" parameterType="com.dandelion.bean.example.NoticeExample" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      这个节点为代码生成工具生成，请不要修改!
      @author generator
    -->
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from notice
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <insert id="batchInsert" parameterType="map">
    <!--
      WARNING - @mbg.generated
      这个节点为代码生成工具生成，请不要修改!
      @author generator
    -->
    insert into notice (notice_id, notice_title, notice_level, roof_placement, create_id, create_name, create_time, notice_content)
    values
    <foreach collection="list" item="item" separator=",">
       (#{item.noticeId,jdbcType=INTEGER}, #{item.noticeTitle,jdbcType=VARCHAR}, #{item.noticeLevel,jdbcType=VARCHAR}, #{item.roofPlacement,jdbcType=TINYINT}, #{item.createId,jdbcType=INTEGER}, #{item.createName,jdbcType=VARCHAR}, #{item.createTime,jdbcType=VARCHAR}, #{item.noticeContent,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      这个节点为代码生成工具生成，请不要修改!
      @author generator
    -->
    insert into notice (
    <foreach collection="selective" item="column" separator=",">
      ${column.value}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'notice_id' == column.value">
          #{item.noticeId,jdbcType=INTEGER}
        </if>
        <if test="'notice_title' == column.value">
          #{item.noticeTitle,jdbcType=VARCHAR}
        </if>
        <if test="'notice_level' == column.value">
          #{item.noticeLevel,jdbcType=VARCHAR}
        </if>
        <if test="'roof_placement' == column.value">
          #{item.roofPlacement,jdbcType=TINYINT}
        </if>
        <if test="'create_id' == column.value">
          #{item.createId,jdbcType=INTEGER}
        </if>
        <if test="'create_name' == column.value">
          #{item.createName,jdbcType=VARCHAR}
        </if>
        <if test="'create_time' == column.value">
          #{item.createTime,jdbcType=VARCHAR}
        </if>
        <if test="'notice_content' == column.value">
          #{item.noticeContent,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>